#!/usr/bin/env python

"""
Script to measure DecoTengu overall performance for different
configurations and few diving scenarios.
"""

import logging
import time

logging.basicConfig(level=logging.ERROR)

import decotengu
from decotengu.alt.naive import DecoStopStepper
from decotengu.alt.tab import tab_engine

COUNT = 10 ** 3


def create_engine():
    engine, deco_table = decotengu.create(validate=False)
    engine.descent_rate = 10
    engine.gf_low = 0.3
    engine.gf_high = 0.85
    return engine


def dive_shallow():
    """
    Shallow dive profile on Air. No gas mix switches.
    """
    engine = create_engine()
    engine.add_gas(0, 21)
    return engine, 17, 90


def dive_u260():
    """
    Nitrox dive with one gas switch.
    """
    engine = create_engine()
    engine.add_gas(0, 27)
    engine.add_gas(22, 50)
    return engine, 45, 25


def dive_he():
    """
    Trimix dive with two gas mix switches.
    """
    engine = create_engine()
    engine.add_gas(0, 18, 45)
    engine.add_gas(22, 50)
    engine.add_gas(6, 100)

    return engine, 68, 20


def dive_deepstop():
    """
    Trimix dive with three gas mix switches.

    This is dive profile presented in Baker "Deep Stops" paper.

    See figure 3, page 7 of the paper for the dive profile and
    decompression stops information.
    """
    engine = create_engine()

    engine.model.gf_low = 0.2
    engine.model.gf_high = 0.75
    engine.add_gas(0, 13, 50)
    engine.add_gas(33, 36)
    engine.add_gas(21, 50)
    engine.add_gas(9, 80)

    return engine, 90, 20


def run(engine, depth, t):
    t1 = time.clock()
    for i in range(COUNT):
        data = engine.calculate(depth, t, descent=False)
        tuple(data)
    t2 = time.clock()
    return t2 - t1
    print('{}: {:.2f}'.format(name, t2 - t1))


def print_result(engine, name, t):
    print('{},{},{:.2f}'.format(engine, name, t))


names = tuple('Scenario {}'.format(i) for i in range(1, 5))
dives = dive_shallow, dive_u260, dive_he, dive_deepstop
print('engine,name,time')
for name, dive in zip(names, dives):
    engine, depth, t = dive()
    rt = run(engine, depth, t)
    print_result('std', name, rt)

    tab_engine(engine)
    rt = run(engine, depth, t)
    print_result('tab', name, rt)

# vim: sw=4:et:ai
