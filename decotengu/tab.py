#
# DecoTengu - dive decompression library.
#
# Copyright (C) 2013 by Artur Wroblewski <wrobell@pld-linux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

"""
Tabular tissue calculator to calculate tissues gas loading using
precomputed values of exp and ln functions.
"""

import logging
logger = logging.getLogger('decotengu.tab')

from .calc import TissueCalculator, ZH_L16B, ZH_L16C
from .const import WATER_VAPOUR_PRESSURE_DEFAULT

LOG_2 = 0.6931471805599453


ZH_L16B_EXP_HALF_LIFE_TIME = (
    # 3.0m, 18s
    (
        0.9592641193252643, 0.9743418912017071, 0.9835020740262483,
        0.9888227107513303, 0.9923279462629435, 0.9945853610058166,
        0.9961777809122565, 0.9973030698372989, 0.9980940740543007,
        0.9985767387697643, 0.9988886172193794, 0.9991303191693161,
        0.9993184482499516, 0.9994669519817097, 0.9995825286229296,
        0.9996725825038852
    ),
    # 6.0m, 36s
    (
        0.9201876506248751, 0.9493421209505192, 0.9672763296139321,
        0.9777703532976092, 0.9847147529344312, 0.9892000403270705,
        0.9923701711832676, 0.9946134131069001, 0.9961917806623120,
        0.9971555032120581, 0.9977784696104439, 0.9982613946833794,
        0.9986373610126913, 0.9989341881036090, 0.9991652315282098,
        0.9993452722099873
    ),
    # 9.0m, 54s
    (
        0.8827029962906549, 0.9249837975243687, 0.9513182763317992,
        0.9668415312400279, 0.9771599684342459, 0.9838438792156678,
        0.9885771149728637, 0.9919310101928650, 0.9942931129006553,
        0.9957362904438203, 0.9966695558004449, 0.9973932258844115,
        0.9979567379716293, 0.9984017082142379, 0.9987481086430828,
        0.9990180690832062
    ),
    # 12.0m, 72s
    (
        0.8467453123625271, 0.9012504626108302, 0.9356234978314001,
        0.9560348637877315, 0.9696631446467180, 0.9785167197830780,
        0.9847985566543080, 0.9892558415321572, 0.9923980638591477,
        0.9943190975860928, 0.9955618744181595, 0.9965258121152057,
        0.9972765788103922, 0.9978695121622165, 0.9983311598948211,
        0.9986909730884536
    ),
    # 15.0m, 90s
    (
        0.8122523963562356, 0.8781260801866497, 0.9201876506248751,
        0.9453489855833636, 0.9622238368941451, 0.9732184049956801,
        0.9810344408134817, 0.9865878876145008, 0.9905066266407768,
        0.9929039217640157, 0.9944554240938888, 0.9956591527191274,
        0.9965968832128218, 0.9973375997962461, 0.9979143852107275,
        0.9983639841906525
    ),
    # 18.0m, 108s
    (
        0.7791645796604999, 0.8555950256826022, 0.9050064628829054,
        0.9347825465305619, 0.9548416039104165, 0.9679487786701335,
        0.9772847122480706, 0.9839271289822377, 0.9886187943616751,
        0.9914907601068199, 0.9933502034594561, 0.9947932470401126,
        0.9959176508629753, 0.9968059709651083, 0.9974977845181352,
        0.9980371023547377
    ),
    # 21.0m, 126s
    (
        0.7474246243174691, 0.8336420754263598, 0.8900757332524964,
        0.9243342116233818, 0.9475160078148386, 0.9627076854687741,
        0.9735493159667561, 0.9812735462301855, 0.9867345601510953,
        0.9900796097478229, 0.9922462111482053, 0.9939280944226681,
        0.9952388814451256, 0.9962746255176652, 0.9970813577444078,
        0.9977103275456551
    ),
    # 24.0m, 144s
    (
        0.7169776240079136, 0.8122523963562355, 0.8753913296942640,
        0.9140026607776263, 0.9402466140861619, 0.9574949708950348,
        0.9698281971884083, 0.9786271200054966, 0.9848539171513851,
        0.9886704678244220, 0.9911434457949991, 0.9930636942118705,
        0.9945605746437605, 0.9957435633028601, 0.9966651048169389,
        0.9973836597283623
    ),
)

# 6s
ZH_L16B_EXP_HALF_LIFE_1M = (
    0.9862327044933592, 0.9913730874626621, 0.9944701686732144,
    0.9962602687614894, 0.9974360806902177, 0.9981918529098890,
    0.9987243002529362, 0.9991002139069131, 0.9993642873064418,
    0.9995253543370601, 0.9996294017470277, 0.9997100223108396,
    0.9997727644512338, 0.9998222857467516, 0.9998608235051117,
    0.9998908489211039
)

# 12s
ZH_L16B_EXP_HALF_LIFE_2M = (
    0.9726549474122855, 0.9828205985452511, 0.9889709163809315,
    0.9925345231127152, 0.9948787350626624, 0.9963869752156774,
    0.9974502279157172, 0.9982012374288395, 0.9987289787435124,
    0.9990509339626257, 0.9992589408371205, 0.9994201287087394,
    0.9995455805384621, 0.9996446030758590, 0.9997216663803202,
    0.9997817097561658
)

# 1min
ZH_L16B_EXP_HALF_LIFE_10M = (
    0.8705505632961241, 0.9170040432046712, 0.9460576467255959,
    0.9632258037629602, 0.9746546091224311, 0.9820649447683404,
    0.9873159873973398, 0.9910384844645918, 0.9936610281476668,
    0.9952636685321292, 0.9963001918042745, 0.9971040041015853,
    0.9977299667246314, 0.9982242780002207, 0.9986091063820456,
    0.9989090251831290
)

ZH_L16C_EXP_HALF_LIFE_TIME = (
    # 3.0m, 18s
    (
        0.9493421209505192, 0.9743418912017071, 0.9835020740262483,
        0.9888227107513303, 0.9923279462629435, 0.9945853610058166,
        0.9961777809122565, 0.9973030698372989, 0.9980940740543007,
        0.9985767387697643, 0.9988886172193794, 0.9991303191693161,
        0.9993184482499516, 0.9994669519817097, 0.9995825286229296,
        0.9996725825038852
    ),
    # 6.0m, 36s
    (
        0.9012504626108302, 0.9493421209505192, 0.9672763296139321,
        0.9777703532976092, 0.9847147529344312, 0.9892000403270705,
        0.9923701711832676, 0.9946134131069001, 0.9961917806623120,
        0.9971555032120581, 0.9977784696104439, 0.9982613946833794,
        0.9986373610126913, 0.9989341881036090, 0.9991652315282098,
        0.9993452722099873
    ),
    # 9.0m, 54s
    (
        0.8555950256826022, 0.9249837975243687, 0.9513182763317992,
        0.9668415312400279, 0.9771599684342459, 0.9838438792156678,
        0.9885771149728637, 0.9919310101928650, 0.9942931129006553,
        0.9957362904438203, 0.9966695558004449, 0.9973932258844115,
        0.9979567379716293, 0.9984017082142379, 0.9987481086430828,
        0.9990180690832062
    ),
    # 12.0m, 72s
    (
        0.8122523963562355, 0.9012504626108302, 0.9356234978314001,
        0.9560348637877315, 0.9696631446467180, 0.9785167197830780,
        0.9847985566543080, 0.9892558415321572, 0.9923980638591477,
        0.9943190975860928, 0.9955618744181595, 0.9965258121152057,
        0.9972765788103922, 0.9978695121622165, 0.9983311598948211,
        0.9986909730884536
    ),
    # 15.0m, 90s
    (
        0.7711054127039705, 0.8781260801866497, 0.9201876506248751,
        0.9453489855833636, 0.9622238368941451, 0.9732184049956801,
        0.9810344408134817, 0.9865878876145008, 0.9905066266407768,
        0.9929039217640157, 0.9944554240938888, 0.9956591527191274,
        0.9965968832128218, 0.9973375997962461, 0.9979143852107275,
        0.9983639841906525
    ),
    # 18.0m, 108s
    (
        0.7320428479728127, 0.8555950256826022, 0.9050064628829054,
        0.9347825465305619, 0.9548416039104165, 0.9679487786701335,
        0.9772847122480706, 0.9839271289822377, 0.9886187943616751,
        0.9914907601068199, 0.9933502034594561, 0.9947932470401126,
        0.9959176508629753, 0.9968059709651083, 0.9974977845181352,
        0.9980371023547377
    ),
    # 21.0m, 126s
    (
        0.6949591099211685, 0.8336420754263598, 0.8900757332524964,
        0.9243342116233818, 0.9475160078148386, 0.9627076854687741,
        0.9735493159667561, 0.9812735462301855, 0.9867345601510953,
        0.9900796097478229, 0.9922462111482053, 0.9939280944226681,
        0.9952388814451256, 0.9962746255176652, 0.9970813577444078,
        0.9977103275456551
    ),
    # 24.0m, 144s
    (
        0.6597539553864471, 0.8122523963562355, 0.8753913296942640,
        0.9140026607776263, 0.9402466140861619, 0.9574949708950348,
        0.9698281971884083, 0.9786271200054966, 0.9848539171513851,
        0.9886704678244220, 0.9911434457949991, 0.9930636942118705,
        0.9945605746437605, 0.9957435633028601, 0.9966651048169389,
        0.9973836597283623
    ),
)

# 6s
ZH_L16C_EXP_HALF_LIFE_1M = (
    0.9828205985452511, 0.9913730874626621, 0.9944701686732144,
    0.9962602687614894, 0.9974360806902177, 0.9981918529098890,
    0.9987243002529362, 0.9991002139069131, 0.9993642873064418,
    0.9995253543370601, 0.9996294017470277, 0.9997100223108396,
    0.9997727644512338, 0.9998222857467516, 0.9998608235051117,
    0.9998908489211039
)

# 12s
ZH_L16C_EXP_HALF_LIFE_2M = (
    0.9659363289248456, 0.9828205985452511, 0.9889709163809315,
    0.9925345231127152, 0.9948787350626624, 0.9963869752156774,
    0.9974502279157172, 0.9982012374288395, 0.9987289787435124,
    0.9990509339626257, 0.9992589408371205, 0.9994201287087394,
    0.9995455805384621, 0.9996446030758590, 0.9997216663803202,
    0.9997817097561658
)

# 1min
ZH_L16C_EXP_HALF_LIFE_10M = (
    0.8408964152537145, 0.9170040432046712, 0.9460576467255959,
    0.9632258037629602, 0.9746546091224311, 0.9820649447683404,
    0.9873159873973398, 0.9910384844645918, 0.9936610281476668,
    0.9952636685321292, 0.9963001918042745, 0.9971040041015853,
    0.9977299667246314, 0.9982242780002207, 0.9986091063820456,
    0.9989090251831290
)



def eq_schreiner_t(abs_p, time, gas, rate, pressure, half_life, texp,
        wvp=WATER_VAPOUR_PRESSURE_DEFAULT):
    """
    Calculate gas loading using Schreiner equation and precomputed values
    of exp and ln functions.

    :Parameters:
     abs_p
        Absolute pressure [bar] (current depth).
     time
        Time of exposure [s] (i.e. time of ascent).
     gas
        Inert gas fraction, i.e. 0.79.
     rate
        Pressure rate change [bar/min].
     pressure
        Current tissue pressure [bar].
     half_life
        Current tissue compartment half-life constant value.
     texp
        Value of exp function for current tissue and time of exposure.
     wvp
        Water vapour pressure.
    """
    palv = gas * (abs_p - wvp)
    t = time / 60.0
    k = LOG_2 / half_life
    r = gas * rate
    return palv + r * (t - 1 / k) - (palv - pressure - r / k) * texp


class TabTissueCalculator(TissueCalculator):
    """
    Tabular tissue calculator.

    Calculate tissue gas loading using precomputed values for exp and ln
    functions.

    :Attributes:
     _exp_time
        Collection of precomputed values for exp function between 3m and
        max depth change (every 3m, 6s at 10m/min) allowed by the
        calculator.
     _exp_1m
        Precomputed values for exp function for 1m (6s at 10m/min) depth
        change.
     _exp_2m
        Precomputed values for exp function for 2m (12s at 10m/min) depth
        change.
     _exp_10m
        Precomputed values for exp function for 10m (1min at 10m/min) depth
        change.
     max_depth
        Maximum depth change allowed by the calculator.
     max_time
        Maximum time change allowed by the calculator.
    """
    def __init__(self):
        self._config = None # allow parent class to set initial config
        super().__init__()


    def _set_config(self, config):
        """
        Set tabular tissue calculator configuration.

        Beside the standard tissue configuration, the precomputed values of
        exp function are set.
        """
        if isinstance(config, ZH_L16B):
            self._exp_time = ZH_L16B_EXP_HALF_LIFE_TIME
            self._exp_1m = ZH_L16B_EXP_HALF_LIFE_1M
            self._exp_2m = ZH_L16B_EXP_HALF_LIFE_2M
            self._exp_10m = ZH_L16B_EXP_HALF_LIFE_10M
        elif isinstance(config, ZH_L16C):
            self._exp_time = ZH_L16C_EXP_HALF_LIFE_TIME
            self._exp_1m = ZH_L16C_EXP_HALF_LIFE_1M
            self._exp_2m = ZH_L16C_EXP_HALF_LIFE_2M
            self._exp_10m = ZH_L16C_EXP_HALF_LIFE_10M
        else:
            raise ValueError('Uknown configuration')

        self._config = config

        self.max_depth = len(self._exp_time) * 3
        self.max_time = self.max_depth * 6
        logger.debug('config set to {}, max_time={}s'.format(self._config,
            self.max_time))

    config = property(lambda self: self._config, _set_config)

    def _load_tissue(self, abs_p, time, gas, rate, pressure, tissue_no):
        """
        Calculate gas loading of a tissue.

        :Parameters:
         abs_p
            Absolute pressure [bar] (current depth).
         time
            Time of exposure [second] (i.e. time of ascent).
         gas
            Inert gas fraction, i.e. 0.79.
         rate
            Pressure rate change [bar/min].
         pressure
            Current tissue pressure [bar].
         tissue_no
            Tissue number.
        """
        hl = self.config.N2_HALF_LIFE[tissue_no]
        if time == 60:
            texp = self._exp_10m[tissue_no]
        elif time == 6:
            texp = self._exp_1m[tissue_no]
        elif time == 12:
            texp = self._exp_2m[tissue_no]
        else:
            idx = int(time / 18) - 1
            texp = self._exp_time[idx][tissue_no]
        return eq_schreiner_t(abs_p, time, gas, rate, pressure, hl, texp)


# vim: sw=4:et:ai
