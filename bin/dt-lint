#!/usr/bin/env python3
#
# DecoTengu - dive decompression library.
#
# Copyright (C) 2013 by Artur Wroblewski <wrobell@pld-linux.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import argparse
import logging
import re
import sys


class ValidateReplacement(argparse.Action):
    PARTS = {'tab', 'ascentjump', 'decostep'}
    def __call__(self, parser, args, values, option_string=None):
        parts = set(values.split(','))
        if parts - self.PARTS:
            s = ', '.join(parts - self.PARTS)
            raise argparse.ArgumentError(self,
                'Invalid part replacement(s): {}'.format(s))
        setattr(args, self.dest, tuple(sorted(parts)))



parser = argparse.ArgumentParser(description='DecoTengu 0.1.0.')
parser.add_argument('-v', '--verbose',
        action='store_true', dest='verbose', default=False,
        help='explain what is being done')
parser.add_argument('--gf_low', '-gl', dest='gf_low', default=30,
        type=int, help='GF Low, i.e. 30 [percentage]')
parser.add_argument('--gf_high', '-gh', dest='gf_high', default=85,
        type=int, help='GF High, i.e. 85 [percentage]')
parser.add_argument('--gas_list', '-l', dest='gas_list',
    help='gas list, i.e. "28,0@0" or "28,0@0 50,0@22"')
parser.add_argument('--pressure', '-p', dest='pressure', default=None,
        type=int, help='atmosphere pressure, i.e. 1013 [millibar]')
#parser.add_argument('--altitude', '-a', dest='altitude', default=None,
#        type=int, help='set altitude, i.e. 700m')
parser.add_argument('--model', '-m', dest='model',
        default='zh-l16b', choices=('zh-l16b', 'zh-l16c'),
        help='decompression model')
parser.add_argument('--descent-rate', dest='descent_rate', default=20.0,
        type=float, help='descent rate, i.e. 20 [m/min]')
parser.add_argument('--time-delta', '-t', dest='time_delta', default=None,
        type=float, help='time between dive steps, i.e. 60, 0.5 [s]')
#parser.add_argument('--no-descent', '-nd', dest='descent',
#        default=True, type=bool, help='decompression model')
parser.add_argument('--tissue-file', '-f', dest='tissue_file',
        default=None, type=str, help='tissue saturation data output file')
parser.add_argument('--replace-parts', '-r', dest='parts',
        default=(), type=str, action=ValidateReplacement,
        help='list of alternative implementations to be used: tab,' \
            ' ascentjump, decostep')
parser.add_argument('depth', type=int, help='dive maximum depth [meter]')
parser.add_argument('time', type=int, help='dive time [minute]')
args = parser.parse_args()

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)

import decotengu
from decotengu.routines import AscentJumper, DecoStopStepper, FirstStopTabFinder
from decotengu.tab import TabTissueCalculator
from decotengu.mod import dive_step_info, info_csv_writer, \
        tissue_pressure_validator

engine, deco_table = decotengu.create(time_delta=args.time_delta)
mods = [deco_table(), tissue_pressure_validator(engine)]

if args.tissue_file:
    f = open(args.tissue_file, 'w')
    csv_writer = info_csv_writer(f)
    info = dive_step_info(engine.calc, csv_writer)
    mods.append(info)

if args.model == 'zh-l16b':
    engine.calc.config = decotengu.ZH_L16B()
elif args.model == 'zh-l16c':
    engine.calc.config = decotengu.ZH_L16C()
else:
    assert False, 'unknown decompression model'

engine.gf_low = args.gf_low / 100
engine.gf_high = args.gf_high / 100

if args.pressure is not None:
    engine.surface_pressure = int(args.pressure) / 1000
engine.descent_rate = args.descent_rate

if args.gas_list:
    for mix in args.gas_list.split():
        o2, he, depth = re.split('[,@]', mix)
        if he != '0':
            print('Helium not supported yet', file=sys.stderr)
            sys.exit(1)
        engine.add_gas(int(depth), int(o2))
else:
    engine.add_gas(0, 21)

if 'ascentjump' in args.parts:
    engine._free_ascent = AscentJumper()
if 'decostep' in args.parts:
    engine._deco_ascent = DecoStopStepper()
#engine._find_first_stop = FirstStopTabFinder()
#engine.calc = TabTissueCalculator()

data = engine.calculate(args.depth, args.time, *mods)
for s in data: pass

print('Dive profile: {:3}m for {}min'.format(args.depth, args.time))
print('Descent rate: {}m/min'.format(engine.descent_rate))
print('Ascent rate: {}m/min'.format(engine.ascent_rate))
print()
print('GF Low: {}%'.format(int(engine.gf_low * 100)))
print('GF High: {}%'.format(int(engine.gf_high * 100)))
print('Surface pressure: {:.2f} millibar'.format(engine.surface_pressure * 1000))
print()

print('Gas list:')
for m in engine._gas_list:
    #print(' o2={}%, he={}% at {}m'.format(m.o2, m.he, m.depth))
    print(' o2={}% at {}m'.format(m.o2, m.depth))
print()

stops = deco_table.stops
if stops:
    print('Decompression stops ({}):'.format(engine.calc.config))
    for stop in stops:
        print(' {:4.0f}m {:3}min'.format(stop.depth, stop.time))
    print('-' * 13)
    print('Sum: {:5}min'.format(deco_table.total))
else:
    print('No decompression dive ({}).'.format(engine.calc.config))

# vim: sw=4:et:ai
